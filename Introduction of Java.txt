Microprocess(Computer) ===> Electronics ===> Signals (ON/OFF)

ON ==> 1
OFF==> 0

Punch Cards ==> Punch ==> 1, No Punch ==> 0

Convert everything into 0 - 1

ADD ==> 000101010101001001111

Programming Language

1. Programmers can create instructions in the language they are familiar with (English)
2. Translator which can convert the instructions into the language that the computer (microprocessor) can understand

For every programmer, there is a corresponding translator

Every programming language has its own
1. syntax/grammar/vocabulary
2. translator(compiler/interpreter)

JDK ===> Java Development Kit
JRE ===> Java Runtime Environment
JVM ===> Java Virtual Machine

JDK-- In java, compiler takes source code
and converts it into bytecode format.
This bytecode is something which is given to client.
bytecode has an extension of .class
Now in developer's machine its must to have jdk.
So this compiler of .java file we will get from jdk.
Now bytecode is in a format that a tool from java 
can understand. And that tool is jvm.
Now jvm takes bytecode and go instruction by instruction.
So inside jvm, the translator is interpreter.

So, java has both interpreter and compiler.
So for running hte prog we need jvm.

Now this jvm is part of jre.
So as a clicent for running the prog we need jre.

So, jre is needed for execution of code.
and for developer jdk comprise of compiler+library files+jre
Developer ==> Create .java file + Check + create .class file
JDK => Compiler + Library Files + JRE
JRE => Class Loader + Bytecode Verifier + JVM

so for downloading java--search jdk-- jaVA 21--
windows-- msi windows installer -- install.


Compiler ==> Translator that will read the entire source code and check if everything in the source code is written as per the specifications of the Java programming language. If everything is fine it will translate the English language code into a bytecode(.class) file which is readable by JVM. If there is any issue in the source code it will display as the error to be rectified by the programmer.

Library Files ==> Predefined code provided by the Java team that is used by the programmer to create the application.

Client ==> Receive .class file
JRE => Class Loader + Bytecode Verifier + JVM

SourceCode(.java) ===> Compiler(Translator) ===> ByteCode(.class)

ByteCode file is not in a human-readable format. It is understandable only by JVM. This is the file that will be shared with the client or actual users of the application

ByteCode(.class) ===> JVM Interpreter(Translator) ===> Machine Understandable language

SourceCode(.c) ===> Compiler(Translator) ===> .exe ===> MP

.class file is making your Java application platform independent as only JVM is required in the client's machine to run the application. But JVM itself is not platform-independent

ClassLoader ==> tool within the JRE that will load all the .class files in the memory. It will also load the .class files of the library files

Bytecode Verifier ==> tool within JRE that will verify whether the bytecode is proper or not. Here we are checking if the bytecode has been manipulated externally. This tool will not allow the file to reach JVM if there is any problem with the content of the file. This is the main reason why we say that Java programs are secure.

JVM ==> .class files are meant for the common virtual machine and not for any physical. This is the reason that makes the Java application platform independent where the same .class file can be executed in the JVM installed in the machine with a different OS. JVM itself is not platform-independent. 

JVM reads the bytecode file and converts the code in the bytecode format line by line into machine code using the interpreter. This converted code will be then given by JVM to the OS for execution.

Execution ==> Actual execution is handled by the OS & processor.

JDK ===> Java Development Kit
 includes compiler
	 source code of java
	 library file
JRE ===> Java Runtime Environment
 includes
JVM ===> Java Virtual Machine
Library Files

First Program in Java

Java program always starts with class declaration, for which we use a class keyword followed by a user-defined class name

While naming the class, use PascalCase ===> The First letter of each word in the name should be in capitals, and the rest of all letters of the word should be in lowercase

Rules/Constraint ===> That has to be followed in the program
Conventions ===> Are the rules to be followed strictly but they are used by the programmer to make the program more readable and understandable

After defining the name we start with the curly braces.

We will also define a main method that is required by the JVM as the starting point for the execution. This is the first method or entry point for the entire application created in Java

Everything that is executable in Java has to be included in the method definition, here we will use the main method

Every executable in Java has to end with a semi-colon (;)

Variables

In any application, we usually write the instructions in the IPO format
IPO (Input - Process - Output)

The variable is the location in the memory to store/hold the data.
The variable will be associated with three things:
1. Name/Identifier
2. Data/Value
3. Datatype

Datatypes: Describe the type of data that can be stored in the memory and also specify the amount of memory to be allocated to the variable.

The main category of data types:
1. Primitive
2. Non - primitive

We have 8 primitive datatypes in java:

Number (Whole Number) ===> 45, 94869, 43985, -45689

1. byte			1 byte		(-128 to 127)
2. short		2 bytes
3. int			4 bytes
4. long			8 bytes

Number (Decimal) ===> 56.34, 5465.546, 784.93485

5. float		4 bytes
6. double		8 bytes

Character (Single Character) ===> a,f,&,*

7. char			2 bytes

Boolean ===> true, false

8. boolean

Non-primitive Datatype

String ===> sequence of characters
Array
Object
Enum

Variable declaration
Java is a statically-type language, hence we need to declare the variable with the datatype and then we can assign it with the value.

Syntax:
datatype variable_name;
datatype variable1,variable2;

OR 

datatype variablename = value; 
Values assigned directly to the variable are known as literals.

Comments:
Notes that can be added to the Java program. It can also be used to mark some lines of the code that need to be ignored by the compiler.

1. Single Line Comments (//comment)
2. Multiline Comments (/* comments line1
			comments line2*/)

Rules of Naming the Variables, Functions, and Class:
1. Should contain letters, digits, underscore, or dollar only.
2. Should not start with the digit
3. Should start with a letter, underscore, or dollar
4. Are case-sensitive
5. Reserved keywords cannot be used

Convention of naming the variables ===> camelCase

Literals
Values that are assigned manually by the programmer to the variable.

byte, short, int  ====> directly assigned them with whole number values

whole number literal by default are of int type, when assigned to byte and short the value is implicitly typecasted by the compiler in the respective datatype

long ===> If we use the large whole number directly, the compiler will reject that number saying that the number is too large, so for long literal we need to indicate that it is long by suffixing the number with L or l.

Decimal literals by default are of double type

float ==> Since the decimal literal is of double type, we cannot assign the literal value directly to the float variable because for the compiler this will lossy conversion. If we want the compiler to consider the decimal literal as float we need to suffix it with F or f.

double ===> We can suffix the double literal also with d or D, but it's not required.

char ===> needs to be enclosed within the single quotes, one character can be stored

boolean ===> hold either true or false literal value

String ===> Sequence of characters, it's the only non-primitive datatype to which we can assign literal value. String literal will be enclosed within double quotes

Operators:
Operators are symbols that operate on the variable and values(literal). Variables and values on which the operator performs some operations are known as operands.

1. Arithmetic Operators

Binary Arithmetic Operator: Work on two operands 
+ Addition
- Subtraction
* Multiplication
/ Division --> Quotient
% Modulus --> Remainder

Unary Arithmetic Operator: Work on only one operand
++ increment (pre/post) -> value is incremented by 1
-- decrement (pre/post) -> value is decremented by 1

a = 20;
b = --a + a++ + --a;

Dry Run Technique

a: 19
ex: 19

a: 20
ex: 19 + 19

a: 19
ex: 19 + 19 + 19 = 57

2. Assignment Operator
Used to assign the value to the variable. This value might be literal or the result of some arithmetic/logical operation.

variable = value

Compound Assignment Operator

Shorthand Assignment

+=, -=, *= , /=, %=

Used to change the value of the variable and reassign the same variable with the new value 

a = a + b  ===> a += b

price = price * 0.05 ===> price *= 0.05

rate = rate / 90 ===> rate /= 90


3. Comparison/Relational/Conditional Operators ===> result is a boolean value

<	less than
>	greater than
<=	less than or equal
>=	greater than or equal
==	equal to
!=	not equal to

a=6
b=5

a<b ==> false
a>b ==> true
a==b ==> false
a!=b ==> true

a=8
b=8
a<b ==> false
a<=b ==> true
a==b ==> true
a!=b ==> false

Conditional Operator can be used in the 
1. Conditional Statements ===> if, if...else
2. Loop Statements ===> for, while, do-while
3. Ternary Operator ===> ? :

4. Logical Operators ===> result is a boolean value

Used to combine two or more conditions: 
&&	(Logical and)
Will evaluate to true if both the conditions are true, otherwise will return false

true && true 		==>true
true && false		==>false
false && true		==>false
false && false		==>false

||	(Logical or)
Will evaluate to true if any one condition is true

true || true		==>true
true || false		==>true
false || true		==>true
false || false		==>false

Used to reverse/invert the result of the condition - unary operator
!	(Logical not)

!true 	==>false
!false	==>true

5. Bitwise Operators

Works only on integer values, the value will be first converted to binary equivalent, then the operator will perform the respective operation on the converted value and give the result. This result is also in binary which is again converted into decimal equivalent and now this value will returned to the user.

Decimal ===> number created using decimal digits (0-9) eg. 7586,835,5437829
Binary ===> number created using only two digits (0,1) eg. 100101,1010,1011

Bitwise operators are not used frequently in the software IT market but is relevant in the hardware and networking market.

& (Bitwise AND)

Truth Table

a	b	a&b
0	0	0
0	1	0
1	0	0
1	1	1

| (Bitwise OR)

Truth Table
a	b	a|b
0	0	0
0	1	1
1	0	1
1	1	1

^ (Bitwise XOR)

Truth Table

a	b	a^b
0	0	0
0	1	1	
1	0	1
1	1	0

~ (Bitwise NOT) ==> Unary Operator

For any number:
1. the sign of the number will be reversed (positive will become negative/ negative will become positive)
2. 1 will be added to the number

a = 14
~a = 14+1 = 15 = -15

a = -14
~a = -14+1 = -13 = 13

>> (Right Shift)
<< (Left Shift)
Both operator work on single operand but they do have a second operand that specifies how many times shift of the digits is to be done.

To convert the number from decimal to binary, we need to divide the number by 2 and collect the remainder. Keep on dividing the number by 2, till the quotient is not 0.


6. Ternary Operator (?:) ===> 3 operands
Can be used to replace the if..else statement

Syntax:

variablename = condition ? expression1 : expression2

If the condition is true, expression1 is executed
If the condition is false, expression2 is executed

Typecasting
Changing the data type of the variable/value to another datatype

Types of typecasting:
1. Implicit Typecasting/Widening: Typecasting done by the compiler

byte -> short -> int -> long -> float -> double

char -> int

2. Explicit Typecasting/Narrowing: Typecasting done by the programmer

byte <- short <- int <- long <- float <- double

char <- int

Input from the user

We can the input from the user using the Scanner class

Include the following statement in the program we you want to take the input value from the user

1. import java.util.Scanner;

We have to import the Scanner class from Java.util package. For using default classes like String and System we don't import any package because these classes are part of the default package that is available to all the Java file called the java.lang package

2. Scanner s = new Scanner(System.in);

Creating the instance of the Scanner class

3. Depending upon the data type of the variable, we can use different functions of the Scanner class to take the input

byte		nextByte()
short		nextShort()
int		nextInt()
long		nextLong()
float		nextFloat()
double		nextDouble()
boolean 	nextBoolean()
String		next()/nextLine()
char		next().charAt(0)

Control Statement
The execution of the statements in the program will be based on whether the condition/criteria is true or false. Conditions are created using conditional/comparison/relational operators and logical operators

1. Conditional Control Statements

I. Simple if statement

Syntax:
if (condition/test_expression){
	code block
}

The code block will contain some statement that will be executed if the condition result is true. If the condition is false nothing special has to be implemented.

If the code block contains only one statement we can skip the curly braces of the if or else statement. But if code block contains more than one statement then we need to include them in the curly braces.

II. if..else statement

Syntax:
if (condition/test_expression){
	code block 1
}
else{
	code block 2
}

The code block 1 will be executed if the condition is true. The code block 2 will be executed if the condition is false. Both will never execute together.

III. if..else..if statement (if..else ladder)

Syntax:
if (condition1){
	code block 1
}
else if(condition2){
	code block 2
}
else if(condition3){
	code block 3
}
....
....
else {
	code block n
}

The code block 1 will be executed if the condition1 is true. If condition1 is false condition2 will be checked, if it is true code block 2 will be executed. If condition2 is false, the condition3 will be checked, if it is true code block 3 will be executed, and so on. If none of the above-mentioned conditions are true then the last else block will be executed.

IV. Nested if statement

Syntax:
if(condition1){ ===> outer if
	code block 1
	if(condition2)	{  ===> inner if
		code block 2
	}
}

Code block 1 will be executed if condition1 is true and in code block 1 we are checking one more condition ie. condition2. If this condition is true the code block 2 will be executed. Here the condition2 will be checked only if the condition1 is true. Here inner if will be executed only if the result of the outer if is true.

V. switch..case statement

Syntax:
switch(expression){
	case value1:	statements;
			break;
	case value2:	statements;
			break;
	case value3:	statements;
}

expression ==> variable ==> int, short, byte, char, String, Enum

In the switch case, the value of the expression is checked and if it matches with any of the case values, the control of the program executed will jump to the respective case statement.

We notice that when the program execution jumps on a particular case, the statement related to that case and all subsequent cases is also executed. To avoid the execution of the subsequent cases we can use the break statement to stop the execution of the switch case and move the execution control out of the switch case.

the default case is the special case that will be executed if none of the cases matches with the value of the expression and this case can be written anywhere inside the switch case

Reuseable ===> Using the code written once, again and again

To achieve this reusability,
1. Loops ===> continuous repetition 
2. Functions ===> repeated on demand/requirement
3. Class
4. Inheritance

Programmers believe in the DRY(Don't Repeat Yourself) concept.

2. Loop Control Statements
Loops are used to repeat a block of code based on some condition. Write the code once, and execute it multiple times.

Loop Statements, Loops are of two types:
1. Counter-Based Loops  ===> mostly for loop

We know the number of times the code block of the loop has to be repeated 

2. Criteria-Based Loops ===> mostly while and do..while

We know the condition for repeating the code block of the loop

I. for loop
Use the for loop when we know beforehand the number of times the loop code block has to be executed.

Syntax:
for(initialize_expression; test_expression; update_expression){
	code block
}

initialize_expression: initialize the variables and this expression will be executed only once at the start of the loop.

test_expression: After the initialization, the test_expression will be executed. If the result of this expression is true, the code block will be executed. This expression will be again executed after the update_expression to check if the condition is true. So every time after the code block execution, test_expression will be used to check the condition and decide whether the code block has to be executed or not.

update_expression: This expression is executed after the code block execution and then test_expression will be executed.

1....10

initialize ===> 1
test ===> check if the value of 10 is achieved
update ===> Start moving 1 to 10

II. while loop

Syntax:
while(test_expression){
	code block
}

If test_expression is true, the code block will be executed else the loop will be terminated.

While loop can work similarly as for loop, where initialize_expression is written before the loop statement and the update_expression is written as the last statement of the code block

III. do..while loop

Syntax:
do{
	code block
}
while(test_expression);

In for and while, the first iteration will happen only if the test_expression is true, and further iterations will also depend on the test_expression result.

In do..while loop, the first iteration of the loop is implemented without checking any condition but further iterations will depend on the test_expression result.

In short, we can say, that the code block statements in the do..while loop will be executed at least once without checking the condition.

int sum = 0; 
for(int i=1 ; i<=10 ; i++){
	sum = sum + i;
}

Iterations ==> Number of times the code block is executed

i=1, 1st Iteration
sum=sum+i ===> sum = 0+1 = 1
i++ ==> 2

i=2, 2nd Iteration
sum=sum+i ===> sum = 1+2 = 3
i++ ==> 3

i=3, 3rd Iteration
sum=sum+i ===> sum = 3+3 = 6
i++ ==> 4

....

i=10, 10th Iteration
sum=sum+i ===> sum = 45+10 = 55
i++ ==> 11

i=11, the condition will be false, no iteration will continue
----------------------------------------------------
int sum = 0;
for(int i=1; i<=10; i++){
	System.out.print("Enter any number: ");
	int num = scan.nextInt();
	sum += num;
}

i=1, 1st Iteration
num = 16
sum = 0 + 16 = 16

i=2, 2nd Iteration
num = 20
sum = 16 + 20 = 36
--------------------------------------------------
num = 3746

rev = ?

1. Extract the last digit from the given number
	(modulus divide the number by 10)

78%10 = 8
645%10 = 5
64634%10 = 4

2. Update the reverse number 
	(multiple the existing reverse number value with 10 and then add the newly extracted last digit to it)

3. Remove the last digit from the number so that the 2nd last digit can become the last digit for next extraction 
	(divide the number by 10)

78/10 = 7
645/10 = 64
64634/10 = 6463


last = num % 10 = 3746 % 10 = 6
rev = (rev*10) + last = (0*10) + 6 = 0 + 6 = 6
num = num / 10 = 3746 / 10 = 374

last = num % 10 = 374 % 10 = 4
rev = (rev*10) + last = (6*10) + 4 = 60 + 4 = 64
num = num / 10 = 374 / 10 = 37

last = num % 10 = 37 % 10 = 7
rev = (rev*10) + last = (64*10) + 7 = 640 + 7 = 647
num = num / 10 = 37 / 10 = 3

last = num % 10 = 3 % 10 = 3
rev = (rev*10) + last = (647*10) + 3 = 6470 + 3 = 6473
num = num / 10 = 3 / 10 = 0

--------------------------------------------------
Palindrome

121 ==> 121 

1221 ==> 1221

IV. enhanced for loop (with arrays)

Mostly used with arrays or collections from the collection API.

For array:
datatype[] variable = new datatype[5];
Syntax:
for(datatype var : variable){
	code block
}

datatype mentioned in the enhanced for loop should be same as that of the datatype of the array.

The number of times the code block will be executed will depend on the size of the array.

Enhanced for loop can be used only for reading the values for the array and not to insert or update the values of the array, because here we are not aware about the index number of the array.

Advantage of using this loop is that we don't have to worry about the lenght, index number of the array.


-----------------------------------------------------------------
break statement: this statement is used to stop the execution of the loop based on some condition. After the execution of this statement, the loop will simply terminated and further execution of the loop will be not done.

continue statement: this statement will not stop the execution of the loop, instead the loop will continue. When continue statement is executed the statements after this will be skipped for current iteration.

------------------------------------------------------------
Nested Loop
Loop within the loop

Here we have atleast two loops, inner loop and outer loop, inner loop is nested inside the outer loop.

The execution of the inner loop will depend on the whether the outer loop is running. For every iteration of the outer loop, inner loop will be restarted.

Nested loop will be used for creating pattern, multidimensional arrays, matrix calculution.

for(int a=1; a<=5; a++)   //outer      
   for(int b=1; b<=5; b++)  //inner
      System.out.println(a); ==> 25 times

a=1, 1st Iteration of outer loop

b=1, 1st Iteration of inner loop

o/p ==> 
1

b=2, 2nd Iteration of inner loop

o/p ==> 
1 
1

b=3, 3rd Iteration of inner loop

o/p ==> 
1 
1
1

b=4, 4th Iteration of inner loop

o/p ==> 
1 
1
1
1

b=5, 5th Iteration of inner loop

o/p ==> 
1 
1
1
1
1

All the iterations of the inner loop are done

a=2, 2nd Iteration of outer loop

b=1, 1st Iteration of inner loop

o/p 
1
1
1
1
1
2

b=2, 2nd Iteration of inner loop

o/p ==> 
1
1
1
1
1
2
2

b=3, 3rd Iteration of inner loop

o/p ==> 
1
1
1
1
1
2
2
2

b=4, 4th Iteration of inner loop

o/p ==> 

1
1
1
1
1
2
2
2
2

b=5, 5th Iteration of inner loop

o/p ==> 
1
1
1
1
1
2
2
2
2
2

All the iterations of the inner loop are done



1
12
123
1234
12345

*
**
***
****
*****

how many rows to be printed ===> deciding factor for the outer loop

rows = 5 ===> outer go from initial value 1 to 5

number of values in each rows/ number of columns ===> deciding factor for the inner loop

at each rows, print the value equal to the row number

for each row ===> inner go from initial 1 to row number

i=1
j=65, j<66
o/p 
A

i=2
j=65, j<67
o/p
A
A
j=66
o/p
A
AB

i=3
j=65, j<68
o/p
A
AB
A
j=66
o/p
A
AB
AB
j=67
o/p
A
AB
ABC


----------------------------------------------------
Arrays

Collection of the values of similar datatype

Imagine we want to store aggregate marks of 50 students
1. use variables, we will create 50 variable to store the marks of each student.
2. use array variable, which is a single variable that can store 50 marks.

Create the array

Syntax:
datatype[] array = new datatype[size];
OR
datatype array[] = new datatype[size];
OR
datatype array[] = {values to be stored in the array}; In this case size will depend on the number of value stored in the array
datatype array[] = new datatype[]{value to be stored in the array}; In this case size will depend on the number of value stored in the array

Decide the size of the array very carefully, because we cannot change the size of the array at the runtime.

---------------------------------------------------------
Access the elements/value in the array

The elements of the array can be accessed using the index number. Each location in the array is associated with an index number as the array will store the values in the memory in the continuious manner. 

int[] arr = new int[5];

First Location ===> 0 ===> arr[0]

int[] arr = {4,5,6,3,5,8,1,2};  ==> size of this array is 8
             0 1 2 3 4 5 6 7

Last Location ===> length-1  ===> arr[7]
-----------------------------------------------------
Enhanced for loop/foreach loop

Syntax:
for(datatype variablename : array variable){
}

datatype: same as that of the array variable
variablename: single variable that will get the individual value from the array
arrayvariable: name of the array that you want to iterate

for(int a : arr){
	//code block will be iterated till the array is not completed
}

-----------------------------------------------------
Memory Allocation in java

In java, memory allocation for the variable is done at the runtime/execution time by the JVM

JVM divides the memory into two parts:
Stack Memory: Used to store order the method calls and local variable, primitive variable and reference variable.

Heap Memory: Used to store objects, arrays, enums.

-----------------------------------------------------
Multidimensional Arrays (2D)

Students		Eng		Maths		Sci
student 1 		23		34		89  ==> {23,34,89}
student 2		78		24		17  ==> {78,24,17}
student 3		67		56		13  ==> {67,56,13}

Arrays within the arrays 

We can create the 2D arrays to store the above data:

int[][] marks = new int[6][3] ===> we are storing 6 rows and 3 column data

int[][] marks = {{23,34,89},{78,24,17},{67,56,13}};
    		  0  1  2    0  1  2    0  1  2
 		     0		1	   2

marks[0] = {23,34,89}
marks[0][0] = 23
marks[0][1] = 34
marks[0][2] = 89

marks[1] = {78,24,17}
marks[1][1] = 24

marks[2][0] = 67

-----------------------------------------------------------
Object - Oriented Programming

Procedural Programming
Here we write the procedure/functions on how to get the things done.

OOP
Here we will take into consideration not just how the things are done but also the data involved in the functionality. Functionality will vary as per the data.

The main advantage of the OOPs are:
1. Breaking the program in the smaller parts(objects), separation of the concerns.
2. Hiding the data and the functionality of the system.

Features of OOPs:
1. Object
2. Class
3. Inheritance (extends/implements)
4. Polymorphism (static => overloading / dynamic => overriding)
5. Encapsulation (access modifier, public methods)
6. Abstraction (abstract class / interface)

------------------------------------------------------
Object is a real world entity.

Each object will have:
1. state
2. behaviour

Person1 ===> me
name: ekwinder
age: 34
phone: 8495649568
email: ek@gmail.com
eat()
sleep()
walk()

Person2 ===> you
name: sweta
age: 20
phone: 9468845784
email: sweta@gmail.com
eat()
sleep()
walk()

Person3 ===> you
name: lakhan
age: 21
phone: 4598748570
email: lakhan@gmail.com
eat()
sleep()
walk()

Conceptuallt we will think of the solution from the object perspectice but while actually programming / implementing that solution we will create a blueprint of these objects known as CLASS in OOPs.

Class: Is a template, blueprint of the object

Object: Is created from the class, you can create any number of objects from the class. Object are also known as instance(example). The process of creating the object from the class is known as instantiation.

OOP is focused on reusable code. We will define only class which is replicated for each object. This concept is known as DRY (Don't Repeat Yourself).

-----------------------------------------------------
Create the class

Syntax:
class ClassName{
		//state (variables/attributes)
		//behaviour (functions/methods)
}

variable ==> store the data
function ==> perform some operation on this data

Conventions (they some standard agreed upon by the programmer to make programming easy and understandable, convention are not rule that has to followed)

1. For naming the class, we use PascalCase where first letter of each word in the class name is in uppercase and rest all letters are in lowercase

class StudentProject

2. For naming the variables and functions of the class, we use camelCase where first word is completely in lowercase and from second word onward we follow PascalCase

void getMarks()
void getTotalScore()

int dateOfBirth;